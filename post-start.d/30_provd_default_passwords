#!/usr/bin/env python

import logging
import os
import string
import sys

from os import urandom

from wazo_auth_client import Client as AuthClient
from xivo.chain_map import ChainMap
from xivo.config_helper import read_config_file_hierarchy, parse_config_file
from wazo_provd_client import Client as ProvdClient

SCRIPT_NAME = os.path.basename(sys.argv[0])
SCRIPT_EXEC = os.path.join('/', 'var', 'lib', 'xivo-upgrade', SCRIPT_NAME)

logger = logging.getLogger('update_default_phone_passwords')

if os.path.exists(SCRIPT_EXEC):
    sys.exit(0)

logging.basicConfig(level=logging.INFO)

_DEFAULT_CONFIG = {
    'config_file': '/etc/wazo-upgrade/config.yml',
    'auth': {
        'key_file': '/var/lib/wazo-auth-keys/wazo-upgrade-key.yml'
    }
}


def load_config():
    file_config = read_config_file_hierarchy(_DEFAULT_CONFIG)
    key_config = _load_key_file(ChainMap(file_config, _DEFAULT_CONFIG))
    return ChainMap(key_config, file_config, _DEFAULT_CONFIG)


def _load_key_file(config):
    key_file = parse_config_file(config['auth']['key_file'])
    return {'auth': {'username': key_file['service_id'],
                     'password': key_file['service_key']}}


config = load_config()


def _generate_phone_password(length):
    chars = string.ascii_letters + string.digits
    return "".join(chars[ord(c) % len(chars)] for c in urandom(length))


auth_client = AuthClient(**config['auth'])
token_data = auth_client.token.new(expiration=300)

logger.debug("Connecting to provd...")
provd_client = ProvdClient(token=token_data['token'], **config['provd'])
config_manager = provd_client.configs

logger.debug("Fetching default device template...")
default_config = config_manager.get('defaultconfigdevice')

logger.info("Updating default phone passwords")
raw_config = default_config['raw_config']

if ('admin_username' not in raw_config and
        'admin_password' not in raw_config and
        'user_username' not in raw_config and
        'user_password' not in raw_config):
    raw_config['admin_username'] = 'admin'
    raw_config['admin_password'] = _generate_phone_password(16)
    raw_config['user_username'] = 'user'
    raw_config['user_password'] = _generate_phone_password(16)
    logger.debug("Updating config...")
    config_manager.update(default_config)
else:
    logger.warn("Phone passwords already set. Not updating.")

# Create empty file as a flag to avoid running the script again
open(SCRIPT_EXEC, 'w').close()

logger.debug('Done.')
